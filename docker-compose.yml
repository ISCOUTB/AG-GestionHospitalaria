services:

  postgresql:
    image: postgres:16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    env_file:
      - path: .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
  
  pgadmin:
    image: dpage/pgadmin4:latest
    depends_on:
      - postgresql
    env_file:
      - path: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL?Variable not set}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD?Variable not set}
    ports:
      - 5050:80

  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:{TAG-latest}'
    build:
      context: ./backend
    depends_on:
      postgresql:
        condition: service_healthy
        restart: true
      mongo:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - POSTGRES_SERVER=postgresql
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - MONGO_USERNAME=${MONGO_USERNAME:Variable not set}
      - MONGO_PASSWORD=${MONGO_PASSWORD:Variable not set}
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=mongo
      - MONGO_PORT=${MONGO_PORT}
  
  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    depends_on:
      postgresql:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - POSTGRES_SERVER=postgresql
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - MONGO_USERNAME=${MONGO_USERNAME:Variable not set}
      - MONGO_PASSWORD=${MONGO_PASSWORD:Variable not set}
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=mongo
      - MONGO_PORT=${MONGO_PORT}
    healthcheck:
      test: ["CMD", "curl", "-X", "http://0.0.0.0:8001/api/v1/users/"]
      interval: 10s
      timeout: 5s
      retries: 5
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 8001:8001
    volumes:
      - ./app:/app

  mongo:
    image: mongo:latest
    healthcheck:
      test: ["CMD-SHELL", "mongo --eval 'db.runCommand({ ping: 1 })' || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    env_file:
      - path: .env
    environment:
      - MONGODATA=/data/db
      - MONGO_USERNAME=${MONGO_USERNAME:Variable not set}
      - MONGO_PASSWORD=${MONGO_PASSWORD:Variable not set}
      - MONGO_DB=${MONGO_DB:Variable not set}


volumes:
  mongo_data:
  postgres_data:
